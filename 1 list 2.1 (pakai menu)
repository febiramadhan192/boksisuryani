//tambahan deletelast

using namespace std;
#include <iostream>
#include <stdlib.h>
#include <string>

#define Null		NULL 		//define untuk membuat nama baru, misal nama asli nya NULL, ganti jadi Null
#define Info(P)		(P)->Info
#define Next(P) 	(P)->Next
#define First(L)	(L)

//Kamus Global
typedef int Infotype;			//membuat type baru
typedef struct sElmt Elmt;		//nama tipe nya Elmt pengganti dari struct
typedef Elmt* Address;			//type baru namanya address bintang artinya petunjuk
typedef Address List;			//list sama aja kaya address

struct sElmt {
	Infotype Info;
	Address Next;
};

void Allocate(Address &P) { 	//memesan tempat di memori
	P=(Address)new Elmt;	
}

void Deallocate(Address P) {	//membebaskan memori
	free(P);
}

void CreateElm(Address &P, Infotype X) {
	Allocate(P);
	Info(P)=X;
	Next(P)=Null;
}

void Tampil(List L, string pesan) {
	Address P;
	
	cout <<pesan;
	P=First(L);					//menunjuk data pertama
	while (P !=Null){
		cout << Info(P) << " ";	//tampilkan
		P=Next(P);				//lalu next
	}
	cout << endl;
}

void InsertFirst(List &L, Address P) {
	Next(P)=First(L);
	First(L)=P;
}

void InsertLast(List &L, Address P) {
	Address Q;
	Q=First(L);
	while (Next(Q)!=Null) {
	Q=Next(Q);
	}
	Next(Q)=P;
}

void DeleteFirst(List &L, Address &P) { //dikeluarkan dari list
	if (P!=Null){
		P=First(L);
		First(L)=Next(P);
	}
}

void DeleteLast (List &L, Address &P) {
	Address Q;
	
	Q=First(L);
	if (Next(Q)==Null) {
		P=Q;
		First(L)=Null;
	}
	else {
			while (Next(Next(Q))!=Null) {
				Q=Next(Q);
			}
	}
	P=Next(Q);
	Next(Q)=Null;
	}

void BalikList(List &L) {
	List L2=Null;
	Address P;
	
	while (L!=Null) {
		DeleteFirst(L,P);
		InsertFirst(L2,P);
	}
	L=L2;
}


int main () {
	List L;
	Address P,Q;
	int pil, bil; 
	
	L=Null;
	pil=0;
	do {
		Tampil(L,"Data : ");
		cout << "MENU\n";
		cout << "1. Insert First : \n" ;
		cout << "2. Insert Last : \n" ;
		cout << "3. Delete First : \n" ;
		cout << "4. Delete Last : \n" ;
		cout << "5. Selesai\n";
		cout << "PILIHAN = ";
		cin >> pil;
		switch (pil) {
			case 1: 
			cout << "Masukkan bilangan yang mau diinsert : ";
			cin >> bil;
			CreateElm (P,bil);
			InsertFirst (L,P);
			break;
			
			case 2 : 
			cout << "Masukkan bilangan yang mau diinsert : ";
			cin >> bil;
			CreateElm (P,bil);
			InsertLast (L,P);
			break;
			
			case 3 : 
			DeleteFirst(L,P);
			Deallocate(P);
			break;
			
			case 4 : 
			DeleteLast(L,P);
			Deallocate(P);
			
		}
	} while (pil!=5);
	system("PAUSE");
	return 0;
}
