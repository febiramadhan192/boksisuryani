using namespace std;
#include <iostream>
#include <stdlib.h>
#include <string>

#define Null		NULL 		//define untuk membuat nama baru, misal nama asli nya NULL, ganti jadi Null
#define Info(P)		(P)->Info
#define Next(P) 	(P)->Next
#define First(L)	(L)

//Kamus Global
typedef int Infotype;			//membuat type baru
typedef struct sElmt Elmt;		//nama tipe nya Elmt pengganti dari struct
typedef Elmt* Address;			//type baru namanya address bintang artinya petunjuk
typedef Address List;			//list sama aja kaya address

struct sElmt {
	Infotype Info;
	Address Next;
};

void Allocate(Address &P) { 	//memesan tempat di memori
	P=(Address)new Elmt;	
}

void Deallocate(Address P) {	//membebaskan memori
	free(P);
}

void CreateElm(Address &P, Infotype X) {
	Allocate(P);
	Info(P)=X;
	Next(P)=Null;
}

void Tampil(List L, string pesan) {
	Address P;
	
	cout <<pesan;
	P=First(L);					//menunjuk data pertama
	while (P !=Null){
		cout << Info(P) << " ";	//tampilkan
		P=Next(P);				//lalu next
	}
	cout << endl;
}

void InsertFirst(List &L, Address P) {
	Next(P)=First(L);
	First(L)=P;
}
int main(){
	List L1,L2;
	Address P,Q;
	
	L1=Null;
	CreateElm(P,50);InsertFirst(L1,P);	//50 di depan
	CreateElm(P,20);InsertFirst(L1,P);	//insert first jadi dia di depan terus
	CreateElm(P,30);InsertFirst(L1,P);	//jadi tampilan nya 30,20,50 jadi yg di input terakhir di masukin pertama
	L2=Null;
	CreateElm(P,30);InsertFirst(L2,P);
	CreateElm(P,70);InsertFirst(L2,P);
	CreateElm(P,60);InsertFirst(L2,P);
	Tampil(L1,"Isi List L1 : ");
	Tampil(L2,"Isi List L2 : ");
	system("PAUSE");
	return 0;
}
